components/ContactForm.jsx
// components/ContactForm.jsx
'use client'; // This directive is important for client-side components in Next.js App Router

import React, { useState } from 'react';

const ContactForm = () => {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    message: '',
  });

  const [errors, setErrors] = useState({});
  const [isSubmitted, setIsSubmitted] = useState(false);
  const [submitMessage, setSubmitMessage] = useState(''); // To show success/error message

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prevData) => ({
      ...prevData,
      [name]: value,
    }));

    // Clear error for the field as user types
    if (errors[name]) {
      setErrors((prevErrors) => ({
        ...prevErrors,
        [name]: '',
      }));
    }
  };

  const validateForm = () => {
    let newErrors = {};
    const { name, email, message } = formData;

    if (!name.trim()) {
      newErrors.name = 'Name is required';
    }

    if (!email.trim()) {
      newErrors.email = 'Email is required';
    } else if (!/\S+@\S+\.\S+/.test(email)) {
      newErrors.email = 'Email address is invalid';
    }

    if (!message.trim()) {
      newErrors.message = 'Message is required';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    const isValid = validateForm();

    if (isValid) {
      console.log('Form data submitted:', formData);
      // Simulate API call
      try {
        // Replace with your actual API endpoint or form service submission
        // Example with a mock API call (e.g., using fetch to a non-existent endpoint for demonstration)
        // const response = await fetch('/api/contact', {
        //   method: 'POST',
        //   headers: {
        //     'Content-Type': 'application/json',
        //   },
        //   body: JSON.stringify(formData),
        // });

        // if (!response.ok) {
        //   throw new Error('Form submission failed');
        // }

        // const result = await response.json(); // If your API returns data

        setIsSubmitted(true);
        setSubmitMessage('Your message has been sent successfully!');
        setFormData({ name: '', email: '', message: '' }); // Clear form
        setErrors({}); // Clear any residual errors
      } catch (error) {
        console.error('Submission error:', error);
        setIsSubmitted(false); // Mark as not submitted if an error occurs
        setSubmitMessage('Failed to send your message. Please try again.');
      }
    } else {
      setSubmitMessage('Please correct the errors in the form.');
      setIsSubmitted(false);
    }
  };

  return (
    <div className="mx-auto my-12 max-w-lg rounded-lg border border-gray-200 bg-white p-8 shadow-md">
      <h2 className="mb-6 text-center text-3xl font-bold text-gray-800">Contact Us</h2>

      {submitMessage && (
        <p className={`mb-4 rounded-md p-3 text-center ${isSubmitted ? 'bg-green-100 text-green-700' : 'bg-red-100 text-red-700'}`}>
          {submitMessage}
        </p>
      )}

      <form onSubmit={handleSubmit} noValidate>
        <div className="mb-5">
          <label htmlFor="name" className="mb-2 block text-lg font-medium text-gray-700">
            Name:
          </label>
          <input
            type="text"
            id="name"
            name="name"
            value={formData.name}
            onChange={handleChange}
            className={`w-full rounded-md border p-3 text-lg focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500 ${
              errors.name ? 'border-red-500' : 'border-gray-300'
            }`}
            aria-invalid={errors.name ? "true" : "false"}
            aria-describedby={errors.name ? "name-error" : null}
          />
          {errors.name && (
            <p id="name-error" className="mt-2 text-sm text-red-600">
              {errors.name}
            </p>
          )}
        </div>

        <div className="mb-5">
          <label htmlFor="email" className="mb-2 block text-lg font-medium text-gray-700">
            Email:
          </label>
          <input
            type="email"
            id="email"
            name="email"
            value={formData.email}
            onChange={handleChange}
            className={`w-full rounded-md border p-3 text-lg focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500 ${
              errors.email ? 'border-red-500' : 'border-gray-300'
            }`}
            aria-invalid={errors.email ? "true" : "false"}
            aria-describedby={errors.email ? "email-error" : null}
          />
          {errors.email && (
            <p id="email-error" className="mt-2 text-sm text-red-600">
              {errors.email}
            </p>
          )}
        </div>

        <div className="mb-6">
          <label htmlFor="message" className="mb-2 block text-lg font-medium text-gray-700">
            Message:
          </label>
          <textarea
            id="message"
            name="message"
            value={formData.message}
            onChange={handleChange}
            rows="5"
            className={`w-full rounded-md border p-3 text-lg focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500 ${
              errors.message ? 'border-red-500' : 'border-gray-300'
            }`}
            aria-invalid={errors.message ? "true" : "false"}
            aria-describedby={errors.message ? "message-error" : null}
          ></textarea>
          {errors.message && (
            <p id="message-error" className="mt-2 text-sm text-red-600">
              {errors.message}
            </p>
          )}
        </div>

        <button
          type="submit"
          className="w-full rounded-md bg-blue-600 py-3 text-xl font-semibold text-white transition duration-300 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
        >
          Submit
        </button>
      </form>
    </div>
  );
};

export default ContactForm;

app/page.jsx
// app/page.jsx
import ContactForm from '../components/ContactForm';

export default function HomePage() {
  return (
    <main className="flex min-h-screen items-center justify-center bg-gray-100 p-4">
      <ContactForm />
    </main>
  );
}

pages/index.jsx
// pages/index.jsx
import ContactForm from '../components/ContactForm';

export default function HomePage() {
  return (
    <div className="flex min-h-screen items-center justify-center bg-gray-100 p-4">
      <ContactForm />
    </div>
  );
}
